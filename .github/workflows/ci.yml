name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Lint and Format Check
      run: ./gradlew checkstyleMain checkstyleTest

    - name: Build application
      run: ./gradlew clean build -x test

    - name: Run Unit Tests
      run: ./gradlew test
      env:
        SPRING_DATA_MONGODB_HOST: localhost
        SPRING_DATA_REDIS_HOST: localhost

    - name: Run Integration Tests
      run: ./gradlew integrationTest --continue
      env:
        SPRING_DATA_MONGODB_HOST: localhost
        SPRING_DATA_REDIS_HOST: localhost

    - name: Generate Test Coverage Report
      run: ./gradlew jacocoTestReport

    - name: Verify Test Coverage
      run: ./gradlew jacocoTestCoverageVerification

    - name: Run SonarQube Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew sonar
      if: env.SONAR_TOKEN != ''

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          build/reports/tests/
          build/reports/jacoco/
          build/reports/checkstyle/

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella

    - name: Security Vulnerability Scan
      run: ./gradlew dependencyCheckAnalyze

    - name: Build Docker Image
      run: |
        docker build -t url-shortener-api:${{ github.sha }} .
        docker build -t url-shortener-api:latest .

    - name: Run Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'url-shortener-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Run SpotBugs Analysis
      run: ./gradlew spotbugsMain spotbugsTest

    - name: Run PMD Analysis
      run: ./gradlew pmdMain pmdTest

    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          build/reports/spotbugs/
          build/reports/pmd/
