plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id 'checkstyle'
	id 'pmd'
	id 'com.github.spotbugs' version '6.0.0'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'com.carloscavalcanti'
version = '0.0.1-SNAPSHOT'
description = 'A RESTful URL Shortener API built with Spring Boot and Java 21'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'commons-validator:commons-validator:1.7'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation platform('org.testcontainers:testcontainers-bom:1.19.0')
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mongodb'
	testImplementation 'org.testcontainers:testcontainers'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Test Configuration
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// Integration Test Configuration
sourceSets {
	integrationTest {
		java {
			compileClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.output
		}
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
	
	useJUnitPlatform()
}

// Jacoco Configuration
jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80 // 80% coverage requirement
			}
		}
	}
}

// Checkstyle Configuration
checkstyle {
	toolVersion = '10.12.1'
	configFile = file("config/checkstyle/checkstyle.xml")
}

// PMD Configuration
pmd {
	toolVersion = '6.55.0'
	ruleSetFiles = files("config/pmd/pmd-rules.xml")
	ruleSets = []
}

// SpotBugs Configuration
spotbugs {
	toolVersion = '4.7.3'
	effort = 'max'
	reportLevel = 'medium'
}

// SonarQube Configuration
sonar {
	properties {
		property "sonar.projectKey", "url-shortener-api"
		property "sonar.projectName", "URL Shortener API"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "your-org" // Replace with your SonarCloud organization
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.java.binaries", "build/classes"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
	}
}

// Dependency Check Configuration
dependencyCheck {
	format = 'ALL'
	suppressionFile = 'config/dependency-check/suppressions.xml'
}